/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PoolContract extends Truffle.Contract<PoolInstance> {
  "new"(
    _assets: string[],
    _minAmounts: (number | BN | string)[],
    _maxAmounts: (number | BN | string)[],
    _maxSlippageRatios: (number | BN | string)[],
    _master: string,
    _priceOracle: string,
    _twapOracle: string,
    _swapController: string,
    meta?: Truffle.TransactionDetails
  ): Promise<PoolInstance>;
}

export interface NXMBought {
  name: "NXMBought";
  args: {
    member: string;
    ethIn: BN;
    nxmOut: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface NXMSold {
  name: "NXMSold";
  args: {
    member: string;
    nxmIn: BN;
    ethOut: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface Payout {
  name: "Payout";
  args: {
    to: string;
    asset: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Swapped {
  name: "Swapped";
  args: {
    fromAsset: string;
    toAsset: string;
    amountIn: BN;
    amountOut: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

type AllEvents = NXMBought | NXMSold | Payout | Swapped;

export interface PoolInstance extends Truffle.ContractInstance {
  ETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  MAX_BUY_SELL_MCR_ETH_FRACTION(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  MAX_MCR_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MCR_RATIO_DECIMALS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  addAsset: {
    (
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assetData(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN]>;

  assets(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  buyNXM: {
    (
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateEthForNXM(
    nxmAmount: number | BN | string,
    currentTotalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateMCRRatio(
    totalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateNXMForEth(
    ethAmount: number | BN | string,
    currentTotalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateTokenSpotPrice(
    totalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAssetDetails(
    _asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN]>;

  getAssets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getEthForNXM(
    nxmAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getMCRRatio(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getNXMForEth(
    ethAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPoolValueInEth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getSwapQuote(
    tokenAmountIn: number | BN | string,
    fromToken: string,
    toToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenPrice(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getWei(
    amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  makeCoverBegin: {
    (
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeCoverUsingCA: {
    (
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  master(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mcr(txDetails?: Truffle.TransactionDetails): Promise<string>;

  minPoolEth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  nxmToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  priceFeedOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  quotation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeAsset: {
    (_asset: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_asset: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sellNXM: {
    (
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sellNXMTokens: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendClaimPayout: {
    (
      asset: string,
      payoutAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      payoutAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      asset: string,
      payoutAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      payoutAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendEther: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setAssetDetails: {
    (
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _asset: string,
      _min: number | BN | string,
      _max: number | BN | string,
      _maxSlippageRatio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapAssetForETH: {
    (
      fromTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      fromTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fromTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fromTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapController(txDetails?: Truffle.TransactionDetails): Promise<string>;

  swapETHForAsset: {
    (
      toTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      toTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      toTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      toTokenAddress: string,
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenController(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferAsset: {
    (
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  twapOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  updateAddressParameters: {
    (
      code: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      code: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      code: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      code: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateUintParameters: {
    (
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeCapitalPool: {
    (newPoolAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPoolAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newPoolAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPoolAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    ETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

    MAX_BUY_SELL_MCR_ETH_FRACTION(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    MAX_MCR_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MCR_RATIO_DECIMALS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    addAsset: {
      (
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    assetData(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN]>;

    assets(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    buyNXM: {
      (
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    calculateEthForNXM(
      nxmAmount: number | BN | string,
      currentTotalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateMCRRatio(
      totalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateNXMForEth(
      ethAmount: number | BN | string,
      currentTotalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateTokenSpotPrice(
      totalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAssetDetails(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN, BN]>;

    getAssets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getEthForNXM(
      nxmAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getMCRRatio(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getNXMForEth(
      ethAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPoolValueInEth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getSwapQuote(
      tokenAmountIn: number | BN | string,
      fromToken: string,
      toToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getTokenPrice(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getWei(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    makeCoverBegin: {
      (
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    makeCoverUsingCA: {
      (
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    master(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mcr(txDetails?: Truffle.TransactionDetails): Promise<string>;

    minPoolEth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    nxmToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    priceFeedOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    quotation(txDetails?: Truffle.TransactionDetails): Promise<string>;

    removeAsset: {
      (_asset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sellNXM: {
      (
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sellNXMTokens: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendClaimPayout: {
      (
        asset: string,
        payoutAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        payoutAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        asset: string,
        payoutAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        payoutAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendEther: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setAssetDetails: {
      (
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _asset: string,
        _min: number | BN | string,
        _max: number | BN | string,
        _maxSlippageRatio: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapAssetForETH: {
      (
        fromTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        fromTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        fromTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        fromTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapController(txDetails?: Truffle.TransactionDetails): Promise<string>;

    swapETHForAsset: {
      (
        toTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        toTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        toTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        toTokenAddress: string,
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tokenController(txDetails?: Truffle.TransactionDetails): Promise<string>;

    transferAsset: {
      (
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    twapOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    updateAddressParameters: {
      (
        code: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        code: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        code: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        code: string,
        value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateUintParameters: {
      (
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    upgradeCapitalPool: {
      (newPoolAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newPoolAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newPoolAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPoolAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
