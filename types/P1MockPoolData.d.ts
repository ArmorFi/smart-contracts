/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface P1MockPoolDataContract
  extends Truffle.Contract<P1MockPoolDataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<P1MockPoolDataInstance>;
}

type AllEvents = never;

export interface P1MockPoolDataInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  c(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAllCurrenciesLen(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastMCR(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN, BN, BN]>;

  getLastMCRDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastMCREther(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastMCRPerc(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastVfull(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getTokenPriceDetails(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  setAverageRate: {
    (
      currency: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      currency: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      currency: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      currency: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLastMCR: {
    (
      mcrPercentagex100: number | BN | string,
      mcrEtherx1E18: number | BN | string,
      vFull: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      mcrPercentagex100: number | BN | string,
      mcrEtherx1E18: number | BN | string,
      vFull: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      mcrPercentagex100: number | BN | string,
      mcrEtherx1E18: number | BN | string,
      vFull: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      mcrPercentagex100: number | BN | string,
      mcrEtherx1E18: number | BN | string,
      vFull: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    c(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAllCurrenciesLen(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastMCR(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN]>;

    getLastMCRDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastMCREther(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastMCRPerc(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastVfull(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getTokenPriceDetails(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    setAverageRate: {
      (
        currency: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        currency: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        currency: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        currency: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLastMCR: {
      (
        mcrPercentagex100: number | BN | string,
        mcrEtherx1E18: number | BN | string,
        vFull: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        mcrPercentagex100: number | BN | string,
        mcrEtherx1E18: number | BN | string,
        vFull: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        mcrPercentagex100: number | BN | string,
        mcrEtherx1E18: number | BN | string,
        vFull: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        mcrPercentagex100: number | BN | string,
        mcrEtherx1E18: number | BN | string,
        vFull: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
