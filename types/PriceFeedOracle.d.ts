/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PriceFeedOracleContract
  extends Truffle.Contract<PriceFeedOracleInstance> {
  "new"(
    assets: string[],
    _aggregators: string[],
    _daiAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<PriceFeedOracleInstance>;
}

type AllEvents = never;

export interface PriceFeedOracleInstance extends Truffle.ContractInstance {
  ETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  aggregators(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  daiAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAssetToEthRate(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrencyForEth(
    currency: string,
    ethIn: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrencyToEthRate(
    currency: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    ETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

    aggregators(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    daiAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAssetToEthRate(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrencyForEth(
      currency: string,
      ethIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrencyToEthRate(
      currency: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
