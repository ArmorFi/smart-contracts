/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface Pool1Contract extends Truffle.Contract<Pool1Instance> {
  "new"(
    _priceOracle: string,
    meta?: Truffle.TransactionDetails
  ): Promise<Pool1Instance>;
}

export interface Apiresult {
  name: "Apiresult";
  args: {
    sender: string;
    msg: string;
    myid: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface NXMBought {
  name: "NXMBought";
  args: {
    member: string;
    ethIn: BN;
    nxmOut: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface NXMSold {
  name: "NXMSold";
  args: {
    member: string;
    nxmIn: BN;
    ethOut: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface Payout {
  name: "Payout";
  args: {
    to: string;
    coverId: BN;
    tokens: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents = Apiresult | NXMBought | NXMSold | Payout;

export interface Pool1Instance extends Truffle.ContractInstance {
  MAX_BUY_SELL_MCR_ETH_FRACTION(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  MAX_MCR_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MCR_RATIO_DECIMALS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  __callback: {
    (
      myid: string,
      result: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      myid: string,
      result: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      myid: string,
      result: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      myid: string,
      result: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyNXM: {
    (
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minTokensOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  c1(txDetails?: Truffle.TransactionDetails): Promise<string>;

  calculateEthForNXM(
    nxmAmount: number | BN | string,
    currentTotalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateMCRRatio(
    totalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateNXMForEth(
    ethAmount: number | BN | string,
    currentTotalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateTokenSpotPrice(
    totalAssetValue: number | BN | string,
    mcrEth: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  closeClaimsOraclise: {
    (
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  closeCoverOraclise: {
    (
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  closeEmergencyPause: {
    (
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getEthForNXM(
    nxmAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getInvestmentAssetBalance(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getMCRRatio(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getNXMForEth(
    ethAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getPoolValueInEth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getTokenPrice(
    currency: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getWei(
    amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  locked(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  makeCoverBegin: {
    (
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeCoverUsingCA: {
    (
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      smartCAdd: string,
      coverCurr: string,
      coverDetails: (number | BN | string)[],
      coverPeriod: number | BN | string,
      _v: number | BN | string,
      _r: string,
      _s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mcrOraclise: {
    (
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mcrOracliseFail: {
    (
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  p2(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pd(txDetails?: Truffle.TransactionDetails): Promise<string>;

  priceFeedOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  q2(txDetails?: Truffle.TransactionDetails): Promise<string>;

  saveIADetailsOracalise: {
    (
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sellNXM: {
    (
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAmount: number | BN | string,
      minEthOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sellNXMTokens: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendClaimPayout: {
    (
      coverid: number | BN | string,
      claimid: number | BN | string,
      sumAssured: number | BN | string,
      coverHolder: string,
      coverCurr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverid: number | BN | string,
      claimid: number | BN | string,
      sumAssured: number | BN | string,
      coverHolder: string,
      coverCurr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      coverid: number | BN | string,
      claimid: number | BN | string,
      sumAssured: number | BN | string,
      coverHolder: string,
      coverCurr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverid: number | BN | string,
      claimid: number | BN | string,
      sumAssured: number | BN | string,
      coverHolder: string,
      coverCurr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sendEther: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  tc(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tk(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferCurrencyAsset: {
    (
      curr: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      curr: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferEther: {
    (
      amount: number | BN | string,
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      amount: number | BN | string,
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  triggerExternalLiquidityTrade: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  upgradeCapitalPool: {
    (newPoolAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newPoolAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newPoolAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newPoolAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    MAX_BUY_SELL_MCR_ETH_FRACTION(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    MAX_MCR_RATIO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MCR_RATIO_DECIMALS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    __callback: {
      (
        myid: string,
        result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        myid: string,
        result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        myid: string,
        result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        myid: string,
        result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyNXM: {
      (
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        minTokensOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    c1(txDetails?: Truffle.TransactionDetails): Promise<string>;

    calculateEthForNXM(
      nxmAmount: number | BN | string,
      currentTotalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateMCRRatio(
      totalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateNXMForEth(
      ethAmount: number | BN | string,
      currentTotalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateTokenSpotPrice(
      totalAssetValue: number | BN | string,
      mcrEth: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    closeClaimsOraclise: {
      (
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    closeCoverOraclise: {
      (
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    closeEmergencyPause: {
      (
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getEthForNXM(
      nxmAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInvestmentAssetBalance(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getMCRRatio(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getNXMForEth(
      ethAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getPoolValueInEth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getTokenPrice(
      currency: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getWei(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    locked(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    makeCoverBegin: {
      (
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    makeCoverUsingCA: {
      (
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        smartCAdd: string,
        coverCurr: string,
        coverDetails: (number | BN | string)[],
        coverPeriod: number | BN | string,
        _v: number | BN | string,
        _r: string,
        _s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mcrOraclise: {
      (
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mcrOracliseFail: {
      (
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: number | BN | string,
        arg1: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

    nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    p2(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pd(txDetails?: Truffle.TransactionDetails): Promise<string>;

    priceFeedOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    q2(txDetails?: Truffle.TransactionDetails): Promise<string>;

    saveIADetailsOracalise: {
      (
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sellNXM: {
      (
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAmount: number | BN | string,
        minEthOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sellNXMTokens: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendClaimPayout: {
      (
        coverid: number | BN | string,
        claimid: number | BN | string,
        sumAssured: number | BN | string,
        coverHolder: string,
        coverCurr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverid: number | BN | string,
        claimid: number | BN | string,
        sumAssured: number | BN | string,
        coverHolder: string,
        coverCurr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        coverid: number | BN | string,
        claimid: number | BN | string,
        sumAssured: number | BN | string,
        coverHolder: string,
        coverCurr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverid: number | BN | string,
        claimid: number | BN | string,
        sumAssured: number | BN | string,
        coverHolder: string,
        coverCurr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sendEther: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    tc(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tk(txDetails?: Truffle.TransactionDetails): Promise<string>;

    transferCurrencyAsset: {
      (
        curr: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        curr: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferEther: {
      (
        amount: number | BN | string,
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        amount: number | BN | string,
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    triggerExternalLiquidityTrade: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    upgradeCapitalPool: {
      (newPoolAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newPoolAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newPoolAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newPoolAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
